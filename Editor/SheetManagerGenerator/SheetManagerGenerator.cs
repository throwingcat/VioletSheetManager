using UnityEditor;
using UnityEngine.Device;

public class SheetManagerGenerator
{
    private const string code = "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing Violet.Sheet;\n\nnamespace Violet.SheetManager\n{\n    public class SheetManager : MonoBehaviour\n    {\n        private static SheetManager _instance;\n\n        public static SheetManager Instance\n        {\n            get\n            {\n                if (_instance == null)\n                    _instance = FindObjectOfType<SheetManager>();\n                return _instance;\n            }\n        }\n\n        [SerializeField] private Config _config;\n\n        private Dictionary<string, Dictionary<string, SheetDataBase>> _sheets = new();\n\n        public void Load(Action onComplete)\n        {\n            StartCoroutine(_Load(onComplete));\n        }\n\n        private IEnumerator _Load(Action onComplete)\n        {\n            foreach (var item in _config.attribute.SheetItems)\n            {\n                if (_sheets.ContainsKey(item.name) == false)\n                    _sheets.Add(item.name, new());\n\n                bool done = false;\n                StartCoroutine(Downloader.Get($\"{_config.attribute.baseUrl}{item.url}\", (result, text) =>\n                {\n                    if (result)\n                    {\n                        string key = \"\";\n                        Type type = Type.GetType(\"Violet.Sheet.\" + item.name);\n                        var data = CSVReader.Read(new TextAsset(text));\n                        foreach (var row in data)\n                        {\n                            var instance = Activator.CreateInstance(type);\n                            foreach (var element in row)\n                            {\n                                string column = element.Key;\n                                object value = element.Value;\n                                var pi = type.GetProperty(column);\n                                if (pi != null)\n                                {\n                                    pi.SetValue(instance, Convert.ChangeType(value, pi.PropertyType));\n                                    if (column.Equals(\"key\") || column.Equals(\"Key\"))\n                                        key = value.ToString();\n                                    continue;\n                                }\n\n                                var fieldInfo = type.GetField(column);\n                                if (fieldInfo != null)\n                                {\n                                    fieldInfo.SetValue(instance, Convert.ChangeType(value, fieldInfo.FieldType));\n                                    if (column.Equals(\"key\") || column.Equals(\"Key\"))\n                                        key = value.ToString();\n                                }\n\n                                _sheets[item.name][key] = instance as SheetDataBase;\n                                var mi = type.GetMethod(\"Initialize\");\n                                mi.Invoke(_sheets[item.name][key], null);\n                            }\n                        }\n                    }\n\n                    done = true;\n                }));\n\n                while (done == false)\n                    yield return null;\n            }\n\n            onComplete?.Invoke();\n        }\n\n        public Dictionary<string, SheetDataBase> Get<T>() where T : SheetDataBase\n        {\n            var key = typeof(T).Name;\n            if (_sheets.TryGetValue(key, out var sheet))\n                return sheet;\n            return new Dictionary<string, SheetDataBase>();\n        }\n\n        public T Get<T>(string key) where T : SheetDataBase\n        {\n            var sheetName = typeof(T).Name;\n            if (_sheets.TryGetValue(sheetName, out var sheet))\n            {\n                if (sheet.TryGetValue(key, out var data))\n                    return data as T;\n            }\n\n            return default;\n        }\n\n#if UNITY_EDITOR\n        [UnityEditor.MenuItem(\"Violet/Sheet/Create Manager\")]\n        public static void Create()\n        {\n            var component = FindObjectOfType<SheetManager>();\n            if (component != null) return;\n\n            var root = GameObject.Find(\"[Violet]\");\n            if (root == null)\n                root = new GameObject(\"[Violet]\");\n            var gameObject = new GameObject(\"Sheet Manager\");\n            gameObject.transform.SetParent(root.transform);\n            component = gameObject.AddComponent<SheetManager>();\n        }\n#endif\n    }\n}";
    [MenuItem("Violet/Sheet/Generate")]
    public static void Generate()
    {
        //code 내용을 Assets/Violet SheetManager 하위에 .cs 파일로 생성
        var folder = $"{Application.dataPath}/Violet/SheetManager";
        if (System.IO.Directory.Exists(folder) == false)
            System.IO.Directory.CreateDirectory(folder);
        
        var path = $"{Application.dataPath}/Violet/SheetManager/SheetManager.cs";
        if(System.IO.File.Exists(path))
            System.IO.File.Delete(path);
        var stream = System.IO.File.Create(path);
        stream.Close();
        
        System.IO.File.WriteAllText(path, code);
        AssetDatabase.Refresh();
    }
}
